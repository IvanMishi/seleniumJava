import time  # Модуль для работы с функцией ожидания
from selenium import webdriver  # Модуль для взаимодействия с веб-браузерами
from selenium.webdriver.common.by import By  # Модуль для определения способов поиска элементов на странице
# from faker import Faker # Импортируем класс Faker из установленной библиотеки


class TestAuthentification(): # общий класс, который будет содержать метод для работы в данном тесте;
    """Класс включающий сценарий о проверке авторизации в системе"""


    def test_buy_product(self): # метод, содержащий создание driver, открытие браузера по требуемой url;
        """Тест покупки товара, включающий авторизацию, выбор товара,
        заполнение данных получателя и подтверждение покупки."""

        with webdriver.Chrome() as driver:  # Создает экземпляр драйвера Chrome, который автоматически закроется.
            # Ссылка на страницу
            link = 'https://www.saucedemo.com/'
            driver.get(link)  # Переходит по указанной ссылке.
            time.sleep(1)  # Ожидает загрузки страницы.
            # Проверяет совпадение ожидаемого и фактического URL.
            assert link == driver.current_url, f'\nОжидаемый URL: {link}, \nФактический URL: {driver.current_url}'

            print('Получает данные для авторизации.')
            # Находит на старице данные для авторизации, берет перввое значение
            login = driver.find_element(By.ID, 'login_credentials').text.splitlines()[1]
            password = driver.find_element(By.CLASS_NAME, 'login_password').text.splitlines()[1]
            # Создает списки для хранения информации о товаре
            item_name = []
            item_price = []

            print(f'Логинится в системе')
            input_username = driver.find_element(By.ID, "user-name").send_keys(login)
            input_password = driver.find_element(By.ID, "password").send_keys(password)
            button_login = driver.find_element(By.ID, "login-button").click()
            print('Авторизуется успешно')
            time.sleep(5)





    def тест_успешная_авторизация(): #корректные данные для входа
        открытие браузера и требуемой url
        ...........................
        закрытие браузера

    def тест_негативный_авторизация_1(): #некорректный логин
        открытие браузера и требуемой url
        ...........................
        закрытие браузера

    def тест_негативный_авторизация_2(): #некорректный пароль
        открытие браузера и требуемой url
        ...........................
        закрытие браузера

    def тест_негативный_авторизация_3(): #пустые поля
        открытие браузера и требуемой url
        ...........................
        закрытие браузреа









# Создаеn экземпляр класса и вызываем его метод;
start_test = TestAuthentification()
start_test.тест_успешная_авторизация() #успешная авторизация, используя корректные данные
start_test.тест_негативный_авторизация_1() #неуспешная авторизация, используя некорректный логин
start_test.тест_негативный_авторизация_2() #неуспешная авторизация, используя некорректный пароль
start_test.тест_негативный_авторизация_3() #неуспешная авторизация, используя пустые поля